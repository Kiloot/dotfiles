* Use-package settings
#+BEGIN_SRC emacs-lisp
;; Setup `use-package'
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Should set before loading `use-package'
(eval-and-compile
  (setq use-package-always-ensure nil)
  (setq use-package-always-defer nil)
  (setq use-package-always-demand nil)
  (setq use-package-expand-minimally nil)
  (setq use-package-enable-imenu-support t))

(eval-when-compile
  (require 'use-package))
#+END_SRC

* Base settings
** Remove modeline lighters

#+BEGIN_SRC emacs-lisp
(use-package diminish
  :ensure t
  :after use-package)
#+END_SRC 

* Selection candidates and search methods Selections
** Completion frameworks and extras
*** Selectrum
#+BEGIN_SRC emacs-lisp
  (use-package selectrum
    :ensure t
    :init (selectrum-mode)
    :config (setq selectrum-highlight-candidates-function #'orderless-highlight-matches))
#+END_SRC

*** Orderless
#+BEGIN_SRC emacs-lisp
  (use-package orderless
    :ensure t
    :custom (completion-styles '(orderless))
    :config
    (setq orderless-skip-highlighting (lambda () selectrum-is-active)))
#+END_SRC

*** Prescient
#+BEGIN_SRC emacs-lisp
(use-package selectrum-prescient
  :ensure t
  :after (selectrum)
  :config  (setq selectrum-prescient-enable-filtering nil)
  :init
  (selectrum-prescient-mode +1)
  (prescient-persist-mode +1))
#+END_SRC

*** Consult
#+BEGIN_SRC emacs-lisp
(use-package consult
  :ensure t
  ;; Replace bindings. Lazily loaded due by `use-package'.
  :bind (;; C-c bindings (mode-specific-map)
         ("C-c h" . consult-history)
         ("C-c m" . consult-mode-command)
         ("C-c b" . consult-bookmark)
         ("C-c k" . consult-kmacro)
	 ("C-c t" . consult-theme)
         ;; C-x bindings (ctl-x-map)
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complet-command
         ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ;; Custom M-# bindings for fast register access
         ("M-#" . consult-register-load)
         ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)
         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop
         ("<help> a" . consult-apropos)            ;; orig. apropos-command
         ;; M-g bindings (goto-map)
         ("M-g e" . consult-compile-error)
         ("M-g g" . consult-goto-line)             ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o" . consult-outline)
         ("M-g m" . consult-mark)
         ("M-g k" . consult-global-mark)
         ("M-g i" . consult-imenu)
         ("M-g I" . consult-project-imenu)
         ;; M-s bindings (search-map)
         ("M-s f" . consult-find)
         ("M-s L" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s m" . consult-multi-occur)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)
         ;; Isearch integration
         ("M-s e" . consult-isearch)
         :map isearch-mode-map
         ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
         ("M-s l" . consult-line))                 ;; required by consult-line to detect isearch

  ;; The :init configuration is always executed (Not lazy)
  :init

  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  ;; Configure other variables and modes in the :config section,
  ;; after lazily loading the package.
  :config

  ;; Optionally configure preview. Note that the preview-key can also be
  ;; configured on a per-command basis via `consult-config'. The default value
  ;; is 'any, such that any key triggers the preview.
  ;; (setq consult-preview-key 'any)
  ;; (setq consult-preview-key (kbd "M-p"))
  ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))

  ;; Optionally configure the narrowing key.
  ;; Both < and C-+ work reasonably well.
  (setq consult-narrow-key "<") ;; (kbd "C-+")

  ;; Optionally make narrowing help available in the minibuffer.
  ;; Probably not needed if you are using which-key.
  ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

  ;; Optionally configure a function which returns the project root directory.
  ;; There are multiple reasonable alternatives to chose from:
  ;; * projectile-project-root
  ;; * vc-root-dir
  ;; * project-roots
  ;; * locate-dominating-file
  (autoload 'projectile-project-root "projectile")
  (setq consult-project-root-function #'projectile-project-root)
  ;; (setq consult-project-root-function
  ;;       (lambda ()
  ;;         (when-let (project (project-current))
  ;;           (car (project-roots project)))))
  ;; (setq consult-project-root-function #'vc-root-dir)
  ;; (setq consult-project-root-function
  ;;       (lambda () (locate-dominating-file "." ".git")))
)
#+END_SRC

*** Marginalia
#+BEGIN_SRC emacs-lisp
(use-package marginalia
  :ensure t
  :config
  (marginalia-mode))
#+END_SRC

*** Embark
#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :init (which-key-mode))

(use-package embark
  :ensure t
  :bind
  (("C-s-a" . embark-act)       ;; pick some comfortable binding
   ("C-h b" . embark-bindings)) ;; alternative for `describe-bindings'

  :init
  ;; optionally replace the key help with a completing-read interface
  (setq prefix-help-command #'embark-prefix-help-command)

  :config
  ;; hide the mode line of the embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*embark collect \\(live\\|completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none))))
  
  (setq embark-action-indicator
      (lambda (map _target)
        (which-key--show-keymap "Embark" map nil nil 'no-paging)
        #'which-key--hide-popup-ignore-command)
      embark-become-indicator embark-action-indicator))

;; consult users will also want the embark-consult package.
(use-package embark-consult
  :ensure t
  :after (embark consult)
  :demand t ; only necessary if you have the hook below
  ;; if you want to have consult previews as you move around an
  ;; auto-updating embark collect buffer
  :hook
  (embark-collect-mode . embark-consult-preview-minor-mode))

#+end_src

*** Projects completion
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-mode +1)
  (setq projectile-mode-line-function
	'(lambda ()
	   (format " [%s]" (projectile-project-name))))
  (setq projectile-globally-ignored-directories
	(quote
	 (".idea" ".ensime_cache" ".eunit" ".git" ".hg" ".fslckout" "_FOSSIL_" ".bzr" "_darcs" ".tox" ".svn" ".stack-work" "pr" "simu" "deps")))
  (setq projectile-current-project-on-switch (quote move-to-end))
  (setq projectile-sort-order (quote recentf))
  (setq projectile-tags-backend (quote auto))
  (setq projectile-completion-system 'ivy)

  (defun projectile-regenerate-tags ()
    "Regenerate the project's [e|g]tags."
    (interactive)
    (if (and (boundp 'ggtags-mode)
             (memq projectile-tags-backend '(auto ggtags)))
	(progn
          (let* ((ggtags-project-root (projectile-project-root))
		 (default-directory ggtags-project-root))
            (ggtags-ensure-project)
            (ggtags-update-tags t)))
      (let* ((project-root (projectile-project-root))
             (tags-exclude (projectile-tags-exclude-patterns))
             (default-directory (format "%s" (substring project-root 0 -1)))
	     ;; (default-directory project-root)
             (tags-file (expand-file-name projectile-tags-file-name))
             (command (format projectile-tags-command tags-file tags-exclude default-directory)))
	(call-process-shell-command command)
	(visit-tags-table tags-file)
	(message "Regenerated %s" tags-file))))

  (projectile-register-project-type 'vhdl '("identity.xml" "bench" "defs" "deps" "pr" "simu" "src")
                                  ;; :project-file "identity.xml"
				    :compilation-dir "simu/"
                                    :compile "./simulate.sh"
                                    :src-dir "hdl/"
                                    :test ""
                                    :test-dir "tb/"
                                    :test-suffix "_tb"
				    :test-prefix "tb_")

  :bind-keymap ("C-c p" . projectile-command-map)
  :bind (:map projectile-command-map
	      ("R" . projectile-regenerate-tags)))
#+END_SRC

* Directory, buffer, window management
** Dired (directory file editor, file manager)
*** Base settings for dired

#+BEGIN_SRC emacs-lisp
(use-package dired
  :config
  (setq dired-recursive-copies 'always)
  (setq dired-recursive-deletes 'always)
  (setq delete-by-moving-to-trash t)
  (setq dired-dwim-target t)
  (setq ls-lisp-dirs-first t)
  (setq ls-lisp-use-insert-directory-program nil)
  (defvar dired-find-alternate-file 'disabled nil)
  :hook ((dired-mode . dired-hide-details-mode)
	 (dired-mode . hl-line-mode)))
#+END_SRC

*** Dired-x (extra Dired functions)

#+BEGIN_SRC emacs-lisp
(use-package dired-x
  :after dired
  :config
  (setq dired-clean-up-buffers-too t)
  :bind (("C-x C-j" . dired-jump)
	 ("C-x 4 C-j" . dired-jump-other-window)))
#+END_SRC 

** Working with buffers
*** Ibuffer (dired-like buffer list manager)

#+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :config
  (setq ibuffer-expert t)
  (setq ibuffer-display-summary nil)
  (setq ibuffer-use-other-window nil)
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-movement-cycle nil)
  (setq ibuffer-default-sorting-mode 'filename/process)
  (setq ibuffer-use-header-line t)
  (setq ibuffer-default-shrink-to-minimum-size nil)
  (setq ibuffer-formats
	'((mark modified read-only locked " "
		(name 30 30 :left :elide)
		" "
		(size 9 -1 :right)
		" "
		(mode 16 16 :left :elide)
		" " filename-and-process)
	  (mark " "
		(name 16 -1)
		" " filename)))
  (setq ibuffer-saved-filter-groups nil)
  :hook
  (ibuffer-mode . hl-line-mode)
  :bind (("C-x C-b" . ibuffer)
	 :map ibuffer-mode-map
	 ("* f" . ibuffer-mark-by-file-name-regexp)
	 ("* g" . ibuffer-mark-by-content-regexp) ; "g" is for "grep"
	 ("* n" . ibuffer-mark-by-name-regexp)
	 ("s n" . ibuffer-do-sort-by-alphabetic)  ; "sort name" mnemonic
	 ("/ g" . ibuffer-filter-by-content)))
#+END_SRC

** Window configuration
*** ace-window
    
#+BEGIN_SRC emacs-lisp
(use-package ace-window
  :ensure t
  :config
  (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l))
  :bind (("C-x o" . ace-window)))
#+END_SRC 

* Version Control
** Generic version control (vc) framework

#+BEGIN_SRC emacs-lisp
(use-package vc
  :config
  (setq vc-find-revision-no-save t))

(use-package vc-annotate
  :config
  (setq vc-annotate-display-mode 'scale) ; scale to oldest
  :bind (:map vc-annotate-mode-map
	      ("<tab>" . vc-annotate-toggle-annotation-visibility)))

(defvar vc-hg-log-graph t
  "If non-nil, use `--graph' in the short log output.")
#+END_SRC 

** Commit log editing

#+BEGIN_SRC emacs-lisp
(use-package log-edit
  :config
  (setq log-edit-confirm 'changed)
  (setq log-edit-keep-buffer nil)
  (setq log-edit-require-final-newline t)
  (setq log-edit-setup-add-author nil))
#+END_SRC 

* Application and utilities
** Org-mode (personal information manager)
*** Org source code blocks

#+BEGIN_SRC emacs-lisp
(use-package org-src
  :after org
  :config
  (setq org-src-window-setup 'current-window)
  (setq org-src-fontify-natively t)
  (setq org-src-preserve-indentation t)
  (setq org-src-tab-acts-natively t)
  (setq org-edit-src-content-indentation 0))

#+END_SRC 

** Email settings
*** Base email settings

#+BEGIN_SRC emacs-lisp
(use-package auth-source
  :config
  (setq user-full-name "Pierre Frelot")
  (setq user-mail-address "pierrotfrelot@gmail.com"))
#+END_SRC 

* General interface and interactions
** Window Configuration

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :init
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  :config
  (setq use-file-dialog nil)
  (setq use-dialog-box t)               ; only for mouse events
  (setq inhibit-splash-screen t)
  (setq inhibit-startup-message t))
#+END_SRC

** Themes
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (load-theme 'doom-nord t))
#+END_SRC   

** Language settings for prose and code
*** Line length (column count)

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (setq-default fill-column 72)
  (setq sentence-end-double-space t)
  (setq sentence-end-without-period nil)
  (setq colon-double-space nil)
  :hook (after-init . column-number-mode))
#+END_SRC 

*** Auto fill plain text

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :diminish auto-fill-function
  :hook (text-mode . (lambda ()
		       (turn-on-auto-fill)
		       (setq adaptive-fill-mode t))))
#+END_SRC 

*** Parenthese

#+BEGIN_SRC emacs-lisp
(use-package paren
  :config
  (setq show-paren-style 'parenthesis)
  (setq show-paren-when-point-in-periphery t)
  (setq show-paren-when-point-inside-paren nil)
  :hook (after-init . show-paren-mode))
#+END_SRC 

* Conveniences and minor extras
** Generic feedback

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq frame-title-format '("%b"))
  (setq echo-keystrokes 0.25)
  (setq ring-bell-function 'ignore)
  (put 'narrow-to-region 'disabled nil)
  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)
  (put 'dired-find-alternate-file 'disabled nil)
  (put 'overwrite-mode 'disabled t))
#+END_SRC

** Package list

#+BEGIN_SRC emacs-lisp
(use-package package
  :commands (list-packages
	     package-refresh-contents
	     package-list-packages)
  :hook (package-menu-mode . hl-line-mode))
#+END_SRC 

* History and state
** Emacs server and desktop

#+BEGIN_SRC emacs-lisp
(use-package server
  :hook (after-init . server-start))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package desktop
    :config
    (setq desktop-auto-save-timeout 300)
    (setq desktop-dirname user-emacs-directory)
    (setq desktop-base-file-name "desktop")
    (setq desktop-files-not-to-save nil)
    (setq desktop-globals-to-clear nil)
    (setq desktop-load-locked-desktop t)
    (setq desktop-missing-file-warning nil)
    (setq desktop-restore-eager 10)
    (setq desktop-restore-frames nil)
    (setq desktop-save 'if-exists)
    (desktop-save-mode 1))
#+END_SRC

** Record various types and history
*** Minibuffer history

#+BEGIN_SRC emacs-lisp
  (use-package savehist
    :config
    (setq savehist-file (concat user-emacs-directory "savehist"))
    (setq history-length 30000)
    (setq history-delete-duplicates nil)
    (setq savehist-save-minibuffer-history t)
    (savehist-mode 1))
#+END_SRC 

*** Record cursor position

#+BEGIN_SRC emacs-lisp
  (use-package saveplace
    :config
    (setq save-place-file (concat user-emacs-directory "saveplace"))
    (setq save-place-forget-unreadable-files t)
    (save-place-mode 1))
#+END_SRC 

*** Backup

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :config
    (setq backup-directory-alist
	  '(("." . "~/.config/emacs/backup/")))
    (setq backup-by-copying t)
    (setq version-control t)
    (setq delete-old-versions t)
    (setq kept-new-versions 6)
    (setq kept-old-versions 2)
    (setq create-lockfiles nil))
#+END_SRC 

* Vhdl
** basics settings

#+BEGIN_SRC emacs-lisp
(setq vhdl-compiler-alist
      (quote
       (("ADVance MS" "vacom" "-work \\1" "make" "-f \\1" nil "valib \\1; vamap \\2 \\1" "./" "work/" "Makefile" "adms"
	 ("^\\s-+\\([0-9]+\\):\\s-+" nil 1 nil)
	 ("^Compiling file \\(.+\\)" 1)
	 ("ENTI/\\1.vif" "ARCH/\\1-\\2.vif" "CONF/\\1.vif" "PACK/\\1.vif" "BODY/\\1.vif" upcase))
	("Aldec" "vcom" "-work \\1" "make" "-f \\1" nil "vlib \\1; vmap \\2 \\1" "./" "work/" "Makefile" "aldec"
	 ("^.* ERROR [^:]+: \".*\" \"\\([^ 	
]+\\)\" \\([0-9]+\\) \\([0-9]+\\)" 1 2 3)
	 ("" 0)
	 nil)
	("Cadence Leapfrog" "cv" "-work \\1 -file" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "leapfrog"
	 ("^duluth: \\*E,[0-9]+ (\\([^ 	
]+\\),\\([0-9]+\\)):" 1 2 nil)
	 ("" 0)
	 ("\\1/entity" "\\2/\\1" "\\1/configuration" "\\1/package" "\\1/body" downcase))
	("Cadence NC" "ncvhdl" "-work \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "ncvhdl"
	 ("^ncvhdl_p: \\*E,\\w+ (\\([^ 	
]+\\),\\([0-9]+\\)|\\([0-9]+\\)):" 1 2 3)
	 ("" 0)
	 ("\\1/entity/pc.db" "\\2/\\1/pc.db" "\\1/configuration/pc.db" "\\1/package/pc.db" "\\1/body/pc.db" downcase))
	("GHDL" "ghdl" "-i --workdir=\\1 --ieee=synopsys -fexplicit " "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "ghdl"
	 ("^ghdl_p: \\*E,\\w+ (\\([^ 	
]+\\),\\([0-9]+\\)|\\([0-9]+\\)):" 1 2 3)
	 ("" 0)
	 ("\\1/entity" "\\2/\\1" "\\1/configuration" "\\1/package" "\\1/body" downcase))
	("IBM Compiler" "g2tvc" "-src" "precomp" "\\1" nil "mkdir \\1" "./" "work/" "Makefile" "ibm"
	 ("^[0-9]+ COACHDL.*: File: \\([^ 	
]+\\), *line.column: \\([0-9]+\\).\\([0-9]+\\)" 1 2 3)
	 (" " 0)
	 nil)
	("Ikos" "analyze" "-l \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "ikos"
	 ("^E L\\([0-9]+\\)/C\\([0-9]+\\):" nil 1 2)
	 ("^analyze +\\(.+ +\\)*\\(.+\\)$" 2)
	 nil)
	("ModelSim" "vcom" "-work \\1" "make" "-f \\1" nil "vlib \\1; vmap \\2 \\1" "./" "work/" "Makefile" "modelsim"
	 ("\\(ERROR:\\|WARNING\\[[0-9]+\\]:\\|\\*\\* Error:\\|\\*\\* Warning: \\[[0-9]+\\]\\| +\\) \\([^ ]+\\)(\\([0-9]+\\)):" 2 3 nil)
	 ("" 0)
	 ("\\1/_primary.dat" "\\2/\\1.dat" "\\1/_primary.dat" "\\1/_primary.dat" "\\1/body.dat" downcase))
	("LEDA ProVHDL" "provhdl" "-w \\1 -f" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "provhdl"
	 ("^\\([^ 	
:]+\\):\\([0-9]+\\): " 1 2 nil)
	 ("" 0)
	 ("ENTI/\\1.vif" "ARCH/\\1-\\2.vif" "CONF/\\1.vif" "PACK/\\1.vif" "BODY/BODY-\\1.vif" upcase))
	("Quartus" "make" "-work \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "quartus"
	 ("^\\(Error\\|Warning\\): .* \\([^ 	
]+\\)(\\([0-9]+\\))" 2 3 nil)
	 ("" 0)
	 nil)
	("QuickHDL" "qvhcom" "-work \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "quickhdl"
	 ("^\\(ERROR\\|WARNING\\)[^:]*: \\([^ 	
]+\\)(\\([0-9]+\\)):" 2 3 nil)
	 ("" 0)
	 ("\\1/_primary.dat" "\\2/\\1.dat" "\\1/_primary.dat" "\\1/_primary.dat" "\\1/body.dat" downcase))
	("Savant" "scram" "-publish-cc -design-library-name \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work._savant_lib/" "Makefile" "savant"
	 ("^\\([^ 	
:]+\\):\\([0-9]+\\): " 1 2 nil)
	 ("" 0)
	 ("\\1_entity.vhdl" "\\2_secondary_units._savant_lib/\\2_\\1.vhdl" "\\1_config.vhdl" "\\1_package.vhdl" "\\1_secondary_units._savant_lib/\\1_package_body.vhdl" downcase))
	("Simili" "vhdlp" "-work \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "simili"
	 ("^\\(Error\\|Warning\\): \\w+: \\([^ 	
]+\\): (line \\([0-9]+\\)): " 2 3 nil)
	 ("" 0)
	 ("\\1/prim.var" "\\2/_\\1.var" "\\1/prim.var" "\\1/prim.var" "\\1/_body.var" downcase))
	("Speedwave" "analyze" "-libfile vsslib.ini -src" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "speedwave"
	 ("^ *ERROR\\[[0-9]+]::File \\([^ 	
]+\\) Line \\([0-9]+\\):" 1 2 nil)
	 ("" 0)
	 nil)
	("Synopsys" "vhdlan" "-nc -work \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "synopsys"
	 ("^\\*\\*Error: vhdlan,[0-9]+ \\([^ 	
]+\\)(\\([0-9]+\\)):" 1 2 nil)
	 ("" 0)
	 ("\\1.sim" "\\2__\\1.sim" "\\1.sim" "\\1.sim" "\\1__.sim" upcase))
	("Synopsys Design Compiler" "vhdlan" "-nc -spc -work \\1" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "synopsys_dc"
	 ("^\\*\\*Error: vhdlan,[0-9]+ \\([^ 	
]+\\)(\\([0-9]+\\)):" 1 2 nil)
	 ("" 0)
	 ("\\1.syn" "\\2__\\1.syn" "\\1.syn" "\\1.syn" "\\1__.syn" upcase))
	("Synplify" "n/a" "n/a" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "synplify"
	 ("^@[EWN]:\"\\([^ 	
]+\\)\":\\([0-9]+\\):\\([0-9]+\\):" 1 2 3)
	 ("" 0)
	 nil)
	("Vantage" "analyze" "-libfile vsslib.ini -src" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "vantage"
	 ("^\\*\\*Error: LINE \\([0-9]+\\) \\*\\*\\*" nil 1 nil)
	 ("^ *Compiling \"\\(.+\\)\" " 1)
	 nil)
	("VeriBest" "vc" "vhdl" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "veribest"
	 ("^ +\\([0-9]+\\): +[^ ]" nil 1 nil)
	 ("" 0)
	 nil)
	("Viewlogic" "analyze" "-libfile vsslib.ini -src" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "viewlogic"
	 ("^\\*\\*Error: LINE \\([0-9]+\\) \\*\\*\\*" nil 1 nil)
	 ("^ *Compiling \"\\(.+\\)\" " 1)
	 nil)
	("Xilinx XST" "xflow" "" "make" "-f \\1" nil "mkdir \\1" "./" "work/" "Makefile" "xilinx"
	 ("^ERROR:HDLParsers:[0-9]+ - \"\\([^ 	
]+\\)\" Line \\([0-9]+\\)\\." 1 2 nil)
	 ("" 0)
	 nil))))

(setq vhdl-model-alist
      (quote
       (("Example Model" "<label> : process (<clock>, <reset>) is
begin  -- process <label>
   if <reset> = '0' then  -- asynchronous reset (active low)
      <cursor>
   elsif rising_edge(<clock>) then  -- rising clock edge
      if <enable> = '1' then  -- synchronous load

      end if;
   end if;
end process <label>;" "e" "")
	("Synchronous Process" "-- purpose: <cursor>
<label> : process (<clock>, <reset>) is
begin
   if <reset> = '0' then

   elsif rising_edge(<clock>) then

   end if;
end process <label>;" "ps" "")
	("Asynchronous Process" "-- purpose: <cursor>
<label> : process () is
begin
    
end process <label>;" "pc" ""))))

(setq vhdl-special-syntax-alist
      (quote
       (("generic/constant" "\\<[cCgG]_\\w+\\>" "Gold3" "BurlyWood1" nil)
	("type" "\\<t_\\w+\\>" "ForestGreen" "PaleGreen" nil)
	("variable" "\\<v_\\w+\\>" "Grey50" "Grey80" nil))))

(setq vhdl-actual-generic-name (quote (".*" . "\\&")))
(setq vhdl-actual-port-name (quote (".*" . "\\&")))
(setq vhdl-array-index-record-field-in-sensitivity-list nil)
(setq vhdl-basic-offset 4)
(setq vhdl-clock-edge-condition (quote function))
(setq vhdl-clock-name "clk")
(setq vhdl-company-name "XXX")
(setq vhdl-compiler "ModelSim")
(setq vhdl-components-package-name (quote ((".*" . "\\&_component_pkg") . "components")))
(setq vhdl-compose-architecture-name (quote (".*" . "rtl")))
(setq vhdl-compose-configuration-create-file t)
(setq vhdl-conditions-in-parenthesis nil)
(setq vhdl-use-direct-instantiation 'never)
(setq vhdl-end-comment-column 80)
(setq vhdl-file-header
      "--------------------------------------------------------------------------------
--
-- Copyright (c) <company>, <year>
-- All rights reserved. No part of this copyrighted work may be
-- reproduced, modified or distributed in any form or by any
-- means or stored in any data base or retrieval system, unless
-- authorized in writing by <company>.
--
--------------------------------------------------------------------------------
-- Project     : <project>
-- File name   : <filename>
-- Author      : <authorfull>
-- Date        : <date>
-- Description : <cursor>
--
--
--------------------------------------------------------------------------------
")
(setq vhdl-file-name-case (quote downcase))
(setq vhdl-highlight-special-words nil)
(setq vhdl-highlight-translate-off t)
(setq vhdl-instance-name (quote (".*" . "i_\\&_%d")))
(setq vhdl-package-file-name (quote (".*" . "\\&_pkg")))
(setq vhdl-reset-name "rstn")
(setq vhdl-sensitivity-list-all t)
(setq vhdl-stutter-mode t)
(setq vhdl-testbench-entity-name (quote (".*" . "\\&_tb")))
(setq vhdl-testbench-include-configuration nil)
(setq vhdl-underscore-is-part-of-word nil)
(setq vhdl-upper-case-constants t)
(setq vhdl-upper-case-enum-values t)
(setq vhdl-use-components-package t)
(setq vhdl-word-completion-case-sensitive t)
(setq vhdl-beautify-options (quote (t t t t t)))
#+END_SRC 

** Project settings

#+BEGIN_SRC emacs-lisp
(require 'projectile)
(defun vhdl-project-setup ()
  (interactive)
  (let* ((pr-root-dir (projectile-project-root))
	 (pr-name (file-name-nondirectory (substring pr-root-dir 0 -1)))
	 (file-path (concat pr-root-dir pr-name ".prj")))
    (vhdl-create-project pr-root-dir pr-name file-path)
    (vhdl-import-project file-path t nil)))

(require 'vhdl-mode)
(define-key vhdl-mode-map (kbd "C-c C-p C-p") 'vhdl-project-setup)

(defun vhdl-create-project (pr-root-dir pr-name file-path)
  (with-temp-file file-path
    (erase-buffer)
    (insert";; -*- Emacs-Lisp -*-\n\n"
      	   ";;; " (file-name-nondirectory pr-name)
      	   " - project setup file for Emacs VHDL Mode " vhdl-version "\n\n"
      	   ";; Project : " pr-name "\n"
      	   ";; Saved   : " (format-time-string "%Y-%m-%d %T ")
      	   (user-login-name) "\n\n\n"
      	   ";; project name\n"
      	   "(setq vhdl-project \"" pr-name "\")\n\n"
      	   ";; project setup\n"
      	   "(vhdl-aput 'vhdl-project-alist vhdl-project\n"
	   "'(\"" pr-name "\" \"" pr-root-dir "\" \n"
	   " (\"-r ./src/\" \"-r ./bench/src/\")\n"
	   " \"\"\n"
	   " ((\"ModelSim\" \"\\\\2\" \"\\\\2\" nil))\n"
	   " \"./simu/\" \"work\" \"./simu/work/\" \"Makefile\" \"\")\n")
    (insert ")\n")))
#+END_SRC
  
** Navigation

#+BEGIN_SRC emacs-lisp
(defcustom allowed-chars-in-signal "a-z0-9A-Z_"
  "*This regexp determins what characters of a signal or constant or function name are allowed.
    Needed to determine end of name."
  :type 'string :group 'whdl)

(defun whdl-get-name (&optional dont-downcase)
  "This function extracts word at current position. To determine end of word, allowed-chars-in-signal is used."
  (save-excursion
    (re-search-forward (concat " *[" allowed-chars-in-signal "]*"))
    (backward-char)
    (if (not dont-downcase)
	(downcase (buffer-substring-no-properties (1+ (point)) (+ (re-search-backward (concat "[^"allowed-chars-in-signal "]")) 1)))
      (buffer-substring-no-properties (1+ (point)) (+ (re-search-backward (concat "[^"allowed-chars-in-signal "]")) 1)))))

(defun whdl-process-file (name)
  "searches a vhdl file for name and tests if it is a type definition or not"
  (let ((found nil) should-be-in-entity beginning-of-entity-port end-of-entity end-of-entity-port apoint (current-pos (point)))
    (save-excursion
      (goto-char (point-min))
      (setq beginning-of-entity-port (re-search-forward (concat "^[ \t]*entity[ \n\t]+[" allowed-chars-in-signal "]+[ \n\t]+is") nil t nil))
      (if beginning-of-entity-port
	  (progn
	    (setq end-of-entity (save-excursion (re-search-forward "^[ \t]*end")))
	    (re-search-forward "port[ \n\t]*(" nil t nil)
	    (setq end-of-entity-port (progn (up-list) (point)))
	    (goto-char (point-min))
	    (setq should-be-in-entity (re-search-forward (concat " +" name "[ \n\t]+") nil t nil))
	    (if (and should-be-in-entity (< beginning-of-entity-port should-be-in-entity) (> end-of-entity-port should-be-in-entity)
		     (< (save-excursion (re-search-forward ":" nil t nil)) (save-excursion (re-search-forward "\n" nil t nil)))
		     (< (point) (save-excursion (re-search-forward ":" nil t nil)))
		     (< end-of-entity-port end-of-entity))
		(setq found (point)))))
      (goto-char (point-min))
      (while (and (not found) (re-search-forward "^ *\\(component\\|function\\|procedure\\|constant\\|file\\|type\\|subtype\\)[ \n\t]+" nil t nil))
	(if (equal name (whdl-get-name))
	    (setq found (point))))
      (goto-char (point-min))
      (while (and (not found) (re-search-forward "^[ \t]*signal[ \n\t]+" nil t nil))
	(if (equal name (whdl-get-name))
	    (setq found (point))
	  (while (> (save-excursion (search-forward ":" nil t nil)) (if (setq apoint (save-excursion (search-forward "," nil t nil))) apoint 0))
	    (search-forward "," nil t nil)
	    (if (equal name (whdl-get-name))
		(setq found (point)))))))
    (if found 
	found 
      nil)))

(defun whdl-process-into-module (name)
  "When point is at an instance, jump into the module.
    Additionally, move point to signal at point."
  (save-excursion
    (save-restriction
      (save-excursion
	(beginning-of-line)
	(setq current_pos (point))
	(end-of-line)
	(setq end-of-line (point)))
      (narrow-to-region current_pos end-of-line)
      (if (re-search-forward "=>" nil t nil)
	  (setq found t)
	(setq found nil)))

    (if (eq found t)
	(progn
	  (search-backward-regexp "\\(?:\\(?:generic\\|port\\) map\\)" nil t)
	  (search-backward-regexp (concat "[" allowed-chars-in-signal "]+ *: +") nil t)
	  (back-to-indentation)
	  (search-forward-regexp " *: +" nil t)
	  (xref-find-definitions (whdl-get-name))
	  (search-forward-regexp (format "^ *%s " name) nil t)
	  (back-to-indentation)
	  (setq found (point))))))

(defun vhdl-goto-type-def ()
  (interactive)
  (setq current-pos (point))
  (setq name_to_find (whdl-get-name))
  (if (not (setq found (whdl-process-into-module name_to_find)))
      (if (not (setq found (whdl-process-file name_to_find)))  ;no definition in calling file found
	  (message (format "no definition found for: %s" name_to_find))
	(progn
	  (push-mark current-pos t nil)
	  (goto-char found)
	  (back-to-indentation)
	  (recenter)))))

(defun vhdl-jump-upper ()
  "Jump to the file that instantiates the entity of the current file"
  (interactive)
  
  (setq pr-src-dir (concat (vc-root-dir) "src/"))
  (cd pr-src-dir)

  (setq entity-name (pft/vhdl-get-entity-name))
  (setq rg-result-command (shell-command-to-string (vhdl-rg-instantiation-regex entity-name)))
  (setq split-rg-result (split-string rg-result-command ":"))
  (setq file-name (car split-rg-result))
  (setq file-name-re (replace-regexp-in-string "\\\\" "/" file-name))
  (setq line-num (string-to-number (car (cdr split-rg-result))))
  (pft/goto-file-line file-name-re line-num))

(defun vhdl-rg-instantiation-regex (entity-name)
  (setq vhdl-rg-instantiation-regex
	(format 
	 "rg --line-number --with-filename \"^[ \t]*[a-zA-Z0-9_]+[ \t]+:[ \t]+%s\"" entity-name)))

(defun pft/vhdl-get-entity-name ()
  (save-excursion
    (goto-char (point-min))
    (let ((entity-name-regexp "^[ \t]*entity[ \n\t]+"))
      (search-forward-regexp entity-name-regexp nil t))
    (whdl-get-name)))

(defun pft/goto-file-line (file line)
  "Open the file and go to the line"
  (setq visible-buffer (find-buffer-visiting file))
  (setq visible-window (when visible-buffer (get-buffer-window visible-buffer)))
  (if visible-window
      (select-window visible-window)
    (switch-to-buffer (find-file-noselect file)))
  (goto-char (point-min))
  (forward-line (1- line))
  (back-to-indentation))

(require 'vhdl-mode)
(define-key vhdl-mode-map (kbd "C-c C-j C-u") 'vhdl-jump-upper)
(define-key vhdl-mode-map (kbd "C-c C-j C-d") 'vhdl-goto-type-def)

#+END_SRC

* Misc
** CSV

#+BEGIN_SRC emacs-lisp
(defvar csv-separators (quote (";" "	")))
#+END_SRC

** Edit Binary files

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.dat\\'" . hexl-mode))
(add-to-list 'auto-mode-alist '("\\.bin\\'" . hexl-mode))
;; (load-file (concat user-emacs-directory "intel-hex-mode.el"))
;; (load-file (concat user-emacs-directory "mot-mode.el"))
#+END_SRC

** AZERTY

#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-x é") 'split-window-vertically) ; comme C-x 2 mais on se passe de MAJ
(global-set-key (kbd "C-x \"") 'split-window-horizontally) ;C-x 3
(global-set-key (kbd "C-x &") 'delete-other-windows) ;C-x 1
(global-set-key (kbd "C-x à") 'delete-window) ;C-x 0

#+END_SRC

** clojure cookbook

#+begin_src emacs-lisp
(defun increment-clojure-cookbook ()
  "When reading the Clojure cookbook, find the next section, and
close the buffer. If the next section is a sub-directory or in
the next chapter, open Dired so you can find it manually."
  (interactive)
  (let* ((cur (buffer-name))
	 (split-cur (split-string cur "[-_]"))
	 (chap (car split-cur))
	 (rec (car (cdr split-cur)))
	 (rec-num (string-to-number rec))
	 (next-rec-num (1+ rec-num))
	 (next-rec-s (number-to-string next-rec-num))
	 (next-rec (if (< next-rec-num 10)
		       (concat "0" next-rec-s)
		     next-rec-s))
	 (target (file-name-completion (concat chap "-" next-rec) "")))
    (progn 
      (if (equal target nil)
	  (dired (file-name-directory (buffer-file-name)))
	(find-file target))
      (kill-buffer cur))))

;; (define-key adoc-mode-map (kbd "M-+") 'increment-clojure-cookbook)

(add-hook 'adoc-mode-hook 'cider-mode)
(add-to-list 'auto-mode-alist '("\\.asciidoc\\'" . adoc-mode))
#+end_src
